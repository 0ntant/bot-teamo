services:
  opensearch:
    image: opensearchproject/opensearch:2.15.0
    container_name: opensearch
    environment:
      - TZ=Europe/Moscow
      - node.name=opensearch
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Elk_admin123
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - "discovery.type=single-node"
    networks:
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "curl -k -u admin:Elk_admin123 --silent --fail https://localhost:9200/_cluster/health || exit 1"]
      interval: 60s
      timeout: 60s
      retries: 5

  dashboard:
    restart: always
    image: opensearchproject/opensearch-dashboards:2.15.0
    container_name: dashboard
    environment:
      TZ: Europe/Moscow
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
      DISABLE_INSTALL_DEMO_CONFIG: "true"
    ports:
      - 5601:5601
    networks:
      - internal_net
    depends_on:
      opensearch:
         condition: service_healthy

  logstash:
    image: logstash:1.5.0
    container_name: logstash
    build:
      context: ./logstash
      dockerfile: Dockerfile
    environment:
      - TZ=Europe/Moscow
    networks:
      - internal_net
    depends_on:
      opensearch:
         condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "bin/logstash -t"]
      interval: 90s
      timeout: 60s
      retries: 5

  rabbit-mq:
    image: rabbit-mq:1.5.0
    container_name: rabbit-mq
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    networks:
      - internal_net
    ports:
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  database:
    image: database:1.5.0
    container_name: database
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./postgresql
      dockerfile: Dockerfile
    networks:
      - internal_net
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d teamo_db"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  chrome-stadalone:
    image: selenium/standalone-chromium:latest
    shm_size: 2gb
    environment:
      - TZ=Europe/Moscow
    networks:
      - internal_net
    ports:
      - '4444:4444'
      - '5900:5900'
      - '7900:7900'

  img-generator:
    image: img-generator:1.5.0
    container_name: img-generator
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./img-generator
      dockerfile: Dockerfile
    networks:
      - internal_net
    ports:
      - '8090:8080'
    depends_on:
      rabbit-mq:
        condition: service_healthy
      logstash:
        condition: service_healthy

  content-storage-service:
    image: content-storage-service:1.5.0
    container_name: content-storage-service
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./content-storage-service
      dockerfile: Dockerfile
    networks:
      - internal_net
    depends_on:
      database:
         condition: service_healthy
      rabbit-mq:
         condition: service_healthy
      logstash:
         condition: service_healthy

  red-queen:
    image: red-queen:1.5.0
    container_name: red-queen
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./red-queen
      dockerfile: Dockerfile
    networks:
      - internal_net
    depends_on:
      database:
         condition: service_healthy
      rabbit-mq:
         condition: service_healthy
      logstash:
         condition: service_healthy
    ports:
      - '8080:8080'

  teamo-auto-reg:
    image: teamo-auto-reg:1.5.0
    container_name: teamo-auto-reg
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./teamo-auto-reg
      dockerfile: Dockerfile
    networks:
      - internal_net
    depends_on:
      rabbit-mq:
         condition: service_healthy
      logstash:
         condition: service_healthy

  proxy-provider:
    image: proxy-provider:1.5.0
    container_name: proxy-provider
    environment:
      - TZ=Europe/Moscow
    build:
      context: ./proxy-provider
      dockerfile: Dockerfile
    networks:
      - internal_net
    depends_on:
      rabbit-mq:
         condition: service_healthy
      logstash:
         condition: service_healthy

networks:
  internal_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.1.0/24
